{"version":3,"sources":["components/CalendarBody.jsx","components/CalendarWrapper.jsx","App.js","reportWebVitals.js","index.js"],"names":["calendarBody","weeks","className","map","week","day","isToday","date","isoDate","generateMonthDays","dt","userTimeZone","weeksInMonth","firstDayOfMonth","startOf","lastDayOfMonth","endOf","firstDayOfGrid","totalDays","equals","diff","days","Math","ceil","calcWeeksInMonth","Array","from","length","_","i","dayDate","plus","toFormat","toISODate","reduce","index","push","CalendarWrapper","DateTime","local","setZone","useState","setTimezone","selectedMonthDt","setSelectedMonth","nextMonth","useMemo","month","prevMonth","minus","months","changeTimeZoneClick","gmtValue","newDt","goToMonth","val","onClick","type","monthLong","year","item","CalendarBody","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8e712f1.chunk.js","sourcesContent":["import React from 'react';\n\nconst calendarBody = ({ weeks }) => {\n    return (\n        <div className=\"calendar-body\">\n            { weeks.map(function (week) {\n                return <div className=\"calendar-week\" key={week[0].isoDate}>\n                    {\n                        week.map(function (day) {\n                            return <span className={`calendar-day ${day.isToday ? 'current' : ''}`} key={day.isoDate}>{day.date}</span>\n                        })\n                    }\n                </div>\n            })}\n        </div>\n    )\n}\n\nexport default calendarBody\n","import React, { useState, useMemo } from 'react';\nimport { DateTime } from 'luxon';\nimport CalendarBody from './CalendarBody';\n\nexport const calcWeeksInMonth = (dt) => {\n    const firstDayOfMonth = dt.startOf('month');\n    const lastDayOfMonth = dt.endOf('month');\n\n    const firstDayOfGrid = firstDayOfMonth.startOf('week');\n    const lastVisibleDay = lastDayOfMonth\n        .endOf('week')\n        .startOf('month')\n        .equals(firstDayOfMonth.startOf('month'))\n        ? lastDayOfMonth.endOf('week')\n        : lastDayOfMonth;\n\n    const totalDays = lastVisibleDay.diff(firstDayOfGrid, 'days').days + 1;\n    return Math.ceil(totalDays / 7);\n};\n\nexport const generateMonthDays = (dt, userTimeZone) => {\n    const weeksInMonth = calcWeeksInMonth(dt);\n    const firstDayOfGrid = dt.startOf('month').startOf('week');\n    const totalDays = weeksInMonth * 7;\n\n    return Array.from({ length: totalDays }, (_, i) => {\n        const dayDate = firstDayOfGrid.plus({ days: i });\n        return {\n            date: dayDate.toFormat('dd'),\n            isoDate: dayDate.toISODate(),\n            isToday: dayDate.toISODate() === userTimeZone.toISODate(),\n        };\n    }).reduce((weeks, day, index) => {\n        if (index % 7 === 0) weeks.push([]);\n        weeks[weeks.length - 1].push(day);\n        return weeks;\n    }, []);\n};\n\nconst CalendarWrapper = () => {\n    const weekDays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n\n    // initial data\n    const dt = DateTime.local().setZone('Europe/Kiev');\n    let [userTimeZone, setTimezone] = useState(dt);\n    let [selectedMonthDt, setSelectedMonth] = useState(dt.startOf('month'));\n    const nextMonth = useMemo(\n        () => selectedMonthDt.plus({ month: 1 }),\n        [selectedMonthDt]\n    );\n    const prevMonth = useMemo(\n        () => selectedMonthDt.minus({ month: 1 }),\n        [selectedMonthDt]\n    );\n    const months = useMemo(() => {\n        if (selectedMonthDt && userTimeZone) {\n            return generateMonthDays(selectedMonthDt, userTimeZone);\n        }\n    }, [selectedMonthDt, userTimeZone]);\n\n    const changeTimeZoneClick = (gmtValue) => {\n        const newDt = dt.setZone(gmtValue);\n        setTimezone(newDt);\n    };\n\n    const goToMonth = (val) => {\n        setSelectedMonth(val);\n    };\n\n    return (\n        <div className=\"calendar-wrapper\">\n            <div className=\"calendar-nav\">\n                <button\n                    className=\"btn\"\n                    onClick={() => goToMonth(prevMonth)}\n                    type=\"button\"\n                >\n                    <span className=\"arrow\">&#x2039;</span>{' '}\n                    {prevMonth.monthLong}{' '}\n                </button>\n                <div className=\"month\">\n                    <span className=\"month-display\">\n                        {selectedMonthDt.monthLong} {selectedMonthDt.year}\n                    </span>\n                </div>\n                <button\n                    className=\"btn\"\n                    onClick={() => goToMonth(nextMonth)}\n                    type=\"button\"\n                >\n                    {nextMonth.monthLong}{' '}\n                    <span className=\"arrow\">&#x203A;</span>\n                </button>\n            </div>\n            <div className=\"calendar-header\">\n                {weekDays.map(function (item) {\n                    return <span key={item}>{item}</span>;\n                })}\n            </div>\n            {months ? <CalendarBody weeks={months} /> : null}\n            <div className={'zone-btns'}>\n                <div className={'zone-btns-nav'}>\n                    <button\n                        className=\"btn\"\n                        type=\"button\"\n                        onClick={() => changeTimeZoneClick('Europe/Kiev')}\n                    >\n                        Kyiv <br /> GMT+3\n                    </button>\n                    <button\n                        className=\"btn\"\n                        type=\"button\"\n                        onClick={() => changeTimeZoneClick('Australia/Sydney')}\n                    >\n                        Sydney <br /> GMT+10\n                    </button>\n                    <button\n                        className=\"btn\"\n                        type=\"button\"\n                        onClick={() => changeTimeZoneClick('Pacific/Honolulu')}\n                    >\n                        Honolulu <br /> GMT-10\n                    </button>\n                </div>\n                <p>* in some cases user's timezone affects today's date</p>\n            </div>\n        </div>\n    );\n};\n\nexport default CalendarWrapper;\n","import './App.css';\nimport React from 'react';\nimport CalendarWrapper from './components/CalendarWrapper'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <CalendarWrapper/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}