{"version":3,"sources":["components/CalendarBody.jsx","components/CalendarWrapper.jsx","App.js","reportWebVitals.js","index.js"],"names":["calendarBody","weeks","className","map","week","day","isToday","date","isoDate","CalendarWrapper","dt","DateTime","local","setZone","useState","userTimeZone","setTimezone","startOf","selectedMonthDt","setSelectedMonth","nextMonth","useMemo","plus","month","prevMonth","minus","months","console","log","weeksCount","firstDayOfMonth","lastDayOfMonth","endOf","startWeek","weekNumber","endWeek","weekday","weekYear","calcWeeksInMonth","monthDays","dayDate","perWeek","perDay","push","toFormat","toISODate","days","generateMonthDays","changeTimeZoneClick","gmtValue","newDt","goToMonth","val","onClick","type","monthLong","year","item","CalendarBody","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.badd2a8b.chunk.js","sourcesContent":["import React from 'react';\n\nconst calendarBody = ({ weeks }) => {\n    return (\n        <div className=\"calendar-body\">\n            { weeks.map(function (week) {\n                return <div className=\"calendar-week\" key={week[0].isoDate}>\n                    {\n                        week.map(function (day) {\n                            return <span className={`calendar-day ${day.isToday ? 'current' : ''}`} key={day.isoDate}>{day.date}</span>\n                        })\n                    }\n                </div>\n            })}\n        </div>\n    )\n}\n\nexport default calendarBody\n","import React, { useState, useMemo } from 'react';\nimport { DateTime } from 'luxon';\nimport CalendarBody from './CalendarBody';\n\nexport const calcWeeksInMonth = (dt) => {\n    const firstDayOfMonth = dt.startOf('month')\n    const lastDayOfMonth = dt.endOf('month')\n    const startWeek = firstDayOfMonth.weekNumber;\n    const endWeek = lastDayOfMonth.weekNumber;\n\n    if (endWeek < startWeek) {\n        // Yearly overlaps, month is either DEC or JAN\n        if (firstDayOfMonth.month === 1) {\n            // January\n            return endWeek + 1;\n        } else {\n            // December\n            if (lastDayOfMonth.weekday === 7) {\n                // Sunday is last day of year\n                return endWeek - startWeek + 1;\n            } else {\n                // Sunday is NOT last day of year\n                return firstDayOfMonth.weekYear - startWeek + 1;\n            }\n        }\n    } else {\n        return endWeek - startWeek + 1;\n    }\n}\n\nexport const generateMonthDays = (dt, userTimeZone) => {\n    console.log({userTimeZone})\n    const weeksCount = calcWeeksInMonth(dt)\n    const monthDays = [];\n    let dayDate = dt.startOf('month').startOf('week')\n\n    for (let perWeek = 0; perWeek < weeksCount; perWeek++) {\n        const week = [];\n\n        for (let perDay = 0; perDay < 7; perDay++) {\n            week.push({\n                date: dayDate.toFormat('dd'),\n                isoDate: dayDate.toISODate(),\n                isToday: dayDate.toISODate() === userTimeZone.toISODate() // compare day with selected zone\n            });\n\n            // get next day\n            dayDate = dayDate.plus({days: 1})\n        }\n\n        monthDays.push(week)\n    }\n\n    return monthDays\n}\n\nconst CalendarWrapper = () => {\n    const weekDays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n\n    // initial data\n    const dt = DateTime.local().setZone('Europe/Kiev')\n    //state\n    let [userTimeZone, setTimezone ] = useState(dt)\n    let [selectedMonthDt, setSelectedMonth ] = useState(dt.startOf('month'))\n    const nextMonth = useMemo(() => selectedMonthDt.plus({month: 1}), [selectedMonthDt]);\n    const prevMonth = useMemo(() => selectedMonthDt.minus({month: 1}), [selectedMonthDt]);\n    const months = useMemo(() => {\n        if (selectedMonthDt && userTimeZone) {\n            return generateMonthDays(selectedMonthDt, userTimeZone);\n        }\n    },[selectedMonthDt, userTimeZone])\n\n    const changeTimeZoneClick = (gmtValue) => {\n        const newDt = dt.setZone(gmtValue)\n        setTimezone(newDt)\n    }\n\n    const goToMonth = (val) => {\n        setSelectedMonth(val)\n    }\n\n    return (\n        <div className=\"calendar-wrapper\">\n            <div className=\"calendar-nav\">\n                <button className=\"btn\" onClick={() => goToMonth(prevMonth)} type=\"button\"><span className=\"arrow\">&#x2039;</span> {prevMonth.monthLong} </button>\n                <div className=\"month\">\n                    <span className=\"month-display\">{selectedMonthDt.monthLong} {selectedMonthDt.year}</span>\n                </div>\n                <button className=\"btn\" onClick={() => goToMonth(nextMonth)} type=\"button\">{nextMonth.monthLong} <span className=\"arrow\">&#x203A;</span></button>\n            </div>\n            <div className=\"calendar-header\">\n                { weekDays.map(function (item) {\n                    return (<span key={item}>{item}</span>)\n                })}\n            </div>\n            {months ? <CalendarBody weeks={months} /> : null}\n            <div className={'zone-btns'}>\n                <div className={'zone-btns-nav'}>\n                    <button className=\"btn\" type=\"button\" onClick={() => changeTimeZoneClick('Europe/Kiev')}>Kyiv <br/> GMT+3</button>\n                    <button className=\"btn\" type=\"button\" onClick={() => changeTimeZoneClick( 'Australia/Sydney')}>Sydney <br/> GMT+10</button>\n                    <button className=\"btn\" type=\"button\" onClick={() => changeTimeZoneClick('Pacific/Honolulu')}>Honolulu <br/> GMT-10</button>\n                </div>\n                <p>* in some cases user's timezone affects today's date</p>\n            </div>\n        </div>\n    )\n}\n\nexport default CalendarWrapper\n","import './App.css';\nimport CalendarWrapper from './components/CalendarWrapper'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <CalendarWrapper/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}